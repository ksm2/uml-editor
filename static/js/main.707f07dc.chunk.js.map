{"version":3,"sources":["css/Color.ts","css/CSSToken.ts","parsing/Parser.ts","parsing/Tokenizer.ts","css/CSSTokenizer.ts","css/Property.ts","css/PropertyMap.ts","model/Anchor.ts","css/Style.ts","css/Rule.ts","css/Selector.ts","css/index.ts","css/CSSParser.ts","renderer/anchors.ts","model/AbstractElement.ts","model/Shape.ts","model/LinePattern.ts","model/Classifier.ts","model/Diagram.ts","model/Tip.ts","model/Relationship.ts","model/Separator.ts","model/Stereotype.ts","model/Text.ts","model/Title.ts","serializer/Serializer.ts","uml/Aggregation.ts","uml/Anchor.ts","uml/Association.ts","uml/Class.ts","uml/Component.ts","uml/Composition.ts","uml/DataType.ts","uml/Dependency.ts","uml/DirectedAssociation.ts","uml/Enumeration.ts","uml/Generalization.ts","uml/Implementation.ts","uml/Interface.ts","uml/Note.ts","uml/Package.ts","uml/Primitive.ts","serializer/index.ts","serializer/UMLSerializer.ts","components/blocks/ContainerFluid.tsx","components/blocks/logo.png","components/blocks/MenuBar.tsx","hooks/useId.ts","components/blocks/DropdownMenu.tsx","components/blocks/DropdownToggle.tsx","components/blocks/Menu.tsx","components/blocks/SplitView.tsx","renderer/constants.ts","renderer/CanvasClassifierRenderer.ts","renderer/Handle.ts","renderer/RenderContext.ts","renderer/CanvasRenderer.ts","components/blocks/DropdownItem.tsx","components/widgets/PNGExport.tsx","components/widgets/AppMenu.tsx","utils.ts","components/widgets/Canvas.tsx","components/blocks/Editor.tsx","components/widgets/CSSEditor.tsx","components/schemas/xmlSchema.ts","components/widgets/XMLEditor.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","red","green","blue","this","sanitizeComponent","intToHex","other","percentage","otherFactor","clamp","thisFactor","hexString","parseInt","slice","min","max","value","clamped","Math","round","toString","padStart","CYAN","fromHexString","WHITE","DARK","CSSToken","Parser","tokenizer","tokens","index","string","tokenize","parse","kind","token","Error","parsers","parser","parseOptional","undefined","result","Set","oldIndex","add","call","err","Tokenizer","subject","length","next","newIndex","push","search","match","startsWith","CSSTokenizer","matches","COLOR","NUMBER","LBRACE","RBRACE","COLON","SEMI","DOT","HASH","IDENTIFIER","ERROR","Property","key","Symbol","iterator","Anchor","PropertyMap","properties","map","Map","property","entries","set","fallback","get","Style","rules","context","head","tail","hasTail","rule","selector","tag","addAll","getProperties","Rule","Selector","classes","id","parseRuleSet","parseSet","parseRule","parseSelector","consume","parsePropertySet","parseClassSet","parseOptionalId","parseProperty","parseIdentifier","parseOneOf","parseColor","parseNumber","parseClass","parseId","color","number","parseFloat","qsin","anchor","NNW","SSW","N","S","NNE","SSE","qcos","ENE","WNW","E","W","ESE","WSW","Shape","AbstractElement","children","hovered","selected","child","delete","reverse","LinePattern","Classifier","x","y","width","height","shape","RECTANGLE","getLeft","getTop","left","top","renderer","renderClassifier","Diagram","renderDiagram","predicate","findElement","element","getChildren","getRight","getBottom","reduceClassifiers","acc","classifier","Infinity","bottom","right","reducer","seed","Tip","Relationship","from","fromAnchor","to","toAnchor","fromTip","NONE","toTip","linePattern","SOLID","getWidth","getHeight","atan2","getY2","getY1","getX2","getX1","renderRelationship","Separator","renderSeparator","Stereotype","renderStereotype","Text","text","renderText","Title","renderTitle","Serializer","serializer","elementMap","DOMParser","XMLSerializer","xml","clear","document","parseFromString","diagram","parseElement","documentElement","Model","hasElement","root","getElement","serializeToString","xmlElement","setClassifier","has","parsed","doParseElement","tagName","parseDiagram","parseClassifier","parseRelationship","parseTitle","parseText","parseChildren","constructor","parseAnchorAttribute","parseIntAttribute","parseEnumAttribute","setIntAttribute","getX","getY","relationship","parseClassifierAttribute","parseTipAttribute","parseLinePatternAttribute","textContent","target","addChild","console","error","attribute","hasAttribute","getAttribute","elementById","ownerDocument","getElementById","enumClass","item","Reflect","toUpperCase","Number","isNaN","setAttribute","String","removeAttribute","values","Aggregation","DIAMOND","DOTS","Association","Class","Component","COMPONENT","Composition","FILLED_DIAMOND","DataType","Dependency","ARROW","TIGHT_DASHES","DirectedAssociation","Enumeration","Generalization","TRIANGLE","Implementation","Interface","Note","NOTE","Package","FOLDER","Primitive","UML","ContainerFluid","className","MenuBar","style","gridArea","alt","src","logo","useId","prefix","useRef","random","substring","current","DropdownMenu","labelledBy","aria-labelledby","DropdownToggle","dropdown","ref","dispose","Dropdown","aria-expanded","data-bs-toggle","classNames","Menu","active","title","SplitView","PADDING","HANDLE_RADIUS","CanvasClassifierRenderer","canvas","getTagName","save","translate","applyStyle","drawShape","fill","stroke","clip","render","restore","pop","isPointInPath","getStyleProperties","lineWidth","getFloat","strokeStyle","getColor","toHexString","isHovered","mix","fillStyle","beginPath","drawRectangleShape","ELLIPSE","drawEllipseShape","drawFolderShape","drawNoteShape","BOX","drawBoxShape","FILE","drawFileShape","drawComponentShape","BOX_DEPTH","w","h","rect","moveTo","lineTo","closePath","ellipse","PI","NOTE_SIZE","FILE_SIZE","COMPONENT_WIDTH","COMPONENT_HEIGHT","COMPONENT_Y","Handle","RenderContext","canvasWidth","canvasHeight","name","unshift","shift","CanvasRenderer","options","classifierRenderer","translateX","translateY","getContext","clearRect","renderHandles","isPointInClassifier","applyRelationshipStyle","drawFromTip","drawToTip","setLineDash","SMALL_DASHES","LARGE_DASHES","rotate","getAngle","drawTip","drawText","separator","stereotype","contextName","getName","size","align","weight","getString","font","metrics","measureText","fillText","fontBoundingBoxAscent","tip","drawArrow","drawTriangle","FILLED_TRIANGLE","drawDiamond","CIRCLE","drawCircle","FILLED_CIRCLE","getHandles","renderHandleAtPoint","isSelected","getClassifierHandles","handle","isPointInHandle","abs","x1","x2","y1","y2","NW","getCenterX","NE","getCenterY","SW","SE","DropdownItem","onClick","event","preventDefault","PNGExport","createElement","dataURL","toDataURL","downloadLink","download","href","click","AppMenu","getMouseCoordinates","clientX","clientY","boundingClientRect","currentTarget","getBoundingClientRect","createRenderer","Canvas","onChange","div","mouseDownCoords","mouseDownRectangle","mouseDownObject","setCursor","cursor","handleLeftMouseButtonMove","coord","by","vec1","vec2","find","el","deltaX","deltaY","setLeft","setTop","setWidth","setHeight","handleHandleUpdate","useEffect","onResize","trunc","window","addEventListener","removeEventListener","backgroundColor","onMouseMove","buttons","setHovered","findHandleForPoint","toLowerCase","onMouseDown","selectedElement","getRectangle","setSelected","renderMouseDown","onMouseUp","completeAfter","cm","pred","setTimeout","state","completionActive","showHint","completeSingle","CodeMirror","Pass","completeIfAfterLt","cur","getCursor","getRange","Pos","line","ch","completeIfInTag","tok","getTokenAt","type","test","charAt","innerMode","getMode","Editor","language","schema","onChangeRef","editor","mode","hintOptions","schemaInfo","codeMirror","fromTextArea","lineNumbers","theme","matchTags","autocorrect","extraKeys","toTextArea","handleChange","newValue","getValue","setValue","on","off","defaultValue","CSSEditor","css","anchorSchema","Object","keys","filter","it","shapeSchema","tipSchema","classifierSchema","attrs","relationshipSchema","classifiers","relationships","class","XMLEditor","xmlSchema","App","useState","setDiagram","setStyle","setXml","setCss","initialXml","initialCss","deserialize","updateElement","serialize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.707f07dc.chunk.js","sourcesContent":["class Color {\n  readonly red: number;\n  readonly green: number;\n  readonly blue: number;\n\n  static readonly CYAN = Color.fromHexString(\"#0dcaf0\");\n  static readonly WHITE = Color.fromHexString(\"#ffffff\");\n  static readonly DARK = Color.fromHexString(\"#212529\");\n\n  constructor(red: number, green: number, blue: number) {\n    this.red = Color.sanitizeComponent(red);\n    this.green = Color.sanitizeComponent(green);\n    this.blue = Color.sanitizeComponent(blue);\n  }\n\n  static fromHexString(hexString: string): Color {\n    const red = parseInt(hexString.slice(1, 3), 16);\n    const green = parseInt(hexString.slice(3, 5), 16);\n    const blue = parseInt(hexString.slice(5, 7), 16);\n    return new Color(red, green, blue);\n  }\n\n  private static clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n  }\n\n  private static sanitizeComponent(value: number): number {\n    const clamped = Color.clamp(0, 255, value);\n    return Math.round(clamped);\n  }\n\n  private static intToHex(value: number): string {\n    return value.toString(16).padStart(2, \"0\");\n  }\n\n  toHexString(): string {\n    return `#${Color.intToHex(this.red)}${Color.intToHex(this.green)}${Color.intToHex(this.blue)}`;\n  }\n\n  mix(other: Color, percentage: number): Color {\n    const otherFactor = Color.clamp(0, 1, percentage);\n    const thisFactor = 1 - otherFactor;\n    const red = thisFactor * this.red + otherFactor * other.red;\n    const green = thisFactor * this.green + otherFactor * other.green;\n    const blue = thisFactor * this.blue + otherFactor * other.blue;\n    return new Color(red, green, blue);\n  }\n}\n\nexport default Color;\n","enum CSSToken {\n  LBRACE,\n  RBRACE,\n  COLON,\n  SEMI,\n  DOT,\n  HASH,\n  COLOR,\n  NUMBER,\n  IDENTIFIER,\n  ERROR,\n}\n\nexport default CSSToken;\n","import Token from \"./Token\";\nimport Tokenizer from \"./Tokenizer\";\n\nabstract class Parser<T, D> {\n  private readonly tokenizer: Tokenizer<T>;\n  private tokens: Token<T>[] = [];\n  private index = 0;\n\n  constructor(tokenizer: Tokenizer<T>) {\n    this.tokenizer = tokenizer;\n  }\n\n  parseFromString(string: string): D {\n    this.index = 0;\n    this.tokens = this.tokenizer.tokenize(string);\n    return this.parse();\n  }\n\n  protected abstract parse(): D;\n\n  protected consume(kind: T): Token<T> {\n    const token = this.tokens[this.index];\n    if (token.kind === kind) {\n      this.index += 1;\n      return token;\n    } else {\n      throw new Error(`Expected ${kind}, but was ${token.kind}`);\n    }\n  }\n\n  protected parseOneOf<U1, U2, U3>(\n    parser1: () => U1,\n    parser2: () => U2,\n    parser3: () => U3,\n  ): U1 | U2 | U3;\n  protected parseOneOf<U1, U2>(parser1: () => U1, parser2: () => U2): U1 | U2;\n  protected parseOneOf<U1>(parser1: () => U1): U1;\n  protected parseOneOf(...parsers: Array<() => unknown>): unknown {\n    for (const parser of parsers) {\n      const value = this.parseOptional(parser);\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    throw new Error(\"None of the one ofs matched\");\n  }\n\n  protected parseSet<U>(parser: () => U): Set<U> {\n    const result = new Set<U>();\n    while (true) {\n      const oldIndex = this.index;\n      try {\n        result.add(parser.call(this));\n      } catch (err) {\n        this.index = oldIndex;\n        return result;\n      }\n      const newIndex = this.index;\n      if (newIndex <= oldIndex) {\n        throw new Error(\"Did not consume any tokens\");\n      }\n    }\n  }\n\n  protected parseOptional<U>(parser: () => U): U | undefined {\n    const oldIndex = this.index;\n    let result;\n    try {\n      result = parser.call(this);\n    } catch (err) {\n      this.index = oldIndex;\n      return undefined;\n    }\n\n    const newIndex = this.index;\n    if (newIndex <= oldIndex) {\n      throw new Error(\"Did not consume any tokens\");\n    }\n\n    return result;\n  }\n}\n\nexport default Parser;\n","import Token from \"./Token\";\n\nabstract class Tokenizer<T> {\n  private subject = \"\";\n  private index = 0;\n\n  tokenize(subject: string): Token<T>[] {\n    this.subject = subject;\n    this.index = 0;\n    const tokens = [];\n    while (this.index < this.subject.length) {\n      const oldIndex = this.index;\n      const kind = this.next();\n      const newIndex = this.index;\n      if (newIndex <= oldIndex) {\n        throw new Error(\"Did not consume any characters\");\n      }\n\n      if (kind === null) {\n        continue;\n      }\n\n      const value = this.subject.slice(oldIndex, newIndex);\n      tokens.push({ kind, value });\n    }\n\n    return tokens;\n  }\n\n  protected abstract next(): T | null;\n\n  protected matches(search: RegExp): boolean {\n    const match = this.subject.slice(this.index).match(search);\n    if (match === null) {\n      return false;\n    }\n\n    this.index += match[0].length;\n    return true;\n  }\n\n  protected startsWith(search: string): boolean {\n    if (this.subject.startsWith(search, this.index)) {\n      this.index += search.length;\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport default Tokenizer;\n","import { Tokenizer } from \"../parsing\";\nimport CSSToken from \"./CSSToken\";\n\nclass CSSTokenizer extends Tokenizer<CSSToken> {\n  protected next(): CSSToken | null {\n    // Whitespace\n    if (this.matches(/^\\s+/)) return null;\n\n    // Literals\n    if (this.matches(/^#[0-9a-fA-F]{6}|^#[0-9a-fA-F]{3}/)) return CSSToken.COLOR;\n    if (this.matches(/^\\d+(\\.\\d*)?|^\\.\\d+/)) return CSSToken.NUMBER;\n\n    // Operators\n    if (this.startsWith(\"{\")) return CSSToken.LBRACE;\n    if (this.startsWith(\"}\")) return CSSToken.RBRACE;\n    if (this.startsWith(\":\")) return CSSToken.COLON;\n    if (this.startsWith(\";\")) return CSSToken.SEMI;\n    if (this.startsWith(\".\")) return CSSToken.DOT;\n    if (this.startsWith(\"#\")) return CSSToken.HASH;\n\n    if (this.matches(/^[a-zA-Z]+(-[a-zA-Z]+)*/)) return CSSToken.IDENTIFIER;\n\n    // Fallback\n    this.matches(/^./);\n    return CSSToken.ERROR;\n  }\n}\n\nexport default CSSTokenizer;\n","class Property {\n  readonly key: string;\n  readonly value: unknown;\n\n  constructor(key: string, value: unknown) {\n    this.key = key;\n    this.value = value;\n  }\n}\n\nexport default Property;\n","import Color from \"./Color\";\nimport Property from \"./Property\";\n\nclass PropertyMap implements Iterable<[string, unknown]> {\n  protected readonly map: Map<string, unknown>;\n\n  constructor(properties = new Set<Property>()) {\n    this.map = new Map<string, unknown>(\n      [...properties].map((property) => [property.key, property.value] as const),\n    );\n  }\n\n  [Symbol.iterator](): Iterator<[string, unknown]> {\n    return this.map.entries();\n  }\n\n  addAll(map: PropertyMap): this {\n    for (const [key, value] of map) {\n      this.map.set(key, value);\n    }\n    return this;\n  }\n\n  getString(key: string, fallback: string): string {\n    const value = this.map.get(key);\n    if (typeof value === \"string\") {\n      return value;\n    }\n\n    return fallback;\n  }\n\n  getColor(key: string, fallback: Color): Color {\n    const value = this.map.get(key);\n    if (value instanceof Color) {\n      return value;\n    }\n\n    return fallback;\n  }\n\n  getFloat(key: string, fallback: number): number {\n    const value = this.map.get(key);\n    if (typeof value === \"number\") {\n      return value;\n    }\n\n    return fallback;\n  }\n}\n\nexport default PropertyMap;\n","enum Anchor {\n  N,\n  NNE,\n  NE,\n  ENE,\n  E,\n  ESE,\n  SE,\n  SSE,\n  S,\n  SSW,\n  SW,\n  WSW,\n  W,\n  WNW,\n  NW,\n  NNW,\n}\n\nexport default Anchor;\n","import PropertyMap from \"./PropertyMap\";\nimport Rule from \"./Rule\";\n\nclass Style {\n  readonly rules: Set<Rule>;\n\n  constructor(rules = new Set<Rule>()) {\n    this.rules = rules;\n  }\n\n  getProperties(context: string[]): PropertyMap {\n    const result = new PropertyMap();\n    const [head, ...tail] = context;\n    const hasTail = tail.length > 0;\n    for (const rule of this.rules) {\n      if (rule.selector.tag === head) {\n        const properties = new PropertyMap(rule.properties);\n        if (hasTail) {\n          properties.addAll(rule.getProperties(tail));\n        }\n        result.addAll(properties);\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default Style;\n","import Style from \"./Style\";\nimport Property from \"./Property\";\nimport Selector from \"./Selector\";\n\nclass Rule extends Style {\n  readonly selector: Selector;\n  readonly properties: Set<Property>;\n\n  constructor(selector: Selector, properties: Set<Property>, rules: Set<Rule>) {\n    super(rules);\n    this.selector = selector;\n    this.properties = properties;\n  }\n}\n\nexport default Rule;\n","class Selector {\n  readonly tag: string;\n  readonly classes: Set<string>;\n  readonly id?: string;\n\n  constructor(tag: string, classes: Set<string>, id?: string) {\n    this.tag = tag;\n    this.classes = classes;\n    this.id = id;\n  }\n}\n\nexport default Selector;\n","import Color from \"./Color\";\nimport CSSParser from \"./CSSParser\";\nimport Property from \"./Property\";\nimport PropertyMap from \"./PropertyMap\";\nimport Rule from \"./Rule\";\nimport Selector from \"./Selector\";\nimport Style from \"./Style\";\n\nexport { Color, CSSParser, Property, PropertyMap, Rule, Selector, Style };\n\nexport const parser = new CSSParser();\n","import { Parser } from \"../parsing\";\nimport Color from \"./Color\";\nimport CSSToken from \"./CSSToken\";\nimport CSSTokenizer from \"./CSSTokenizer\";\nimport Property from \"./Property\";\nimport Rule from \"./Rule\";\nimport Selector from \"./Selector\";\nimport Style from \"./Style\";\n\nclass CSSParser extends Parser<CSSToken, Style> {\n  constructor() {\n    super(new CSSTokenizer());\n  }\n\n  protected parse(): Style {\n    return new Style(this.parseRuleSet());\n  }\n\n  private parseRuleSet(): Set<Rule> {\n    return this.parseSet(this.parseRule);\n  }\n\n  protected parseRule(): Rule {\n    const selector = this.parseSelector();\n    this.consume(CSSToken.LBRACE);\n    const properties = this.parsePropertySet();\n    const rules = this.parseRuleSet();\n    this.consume(CSSToken.RBRACE);\n\n    return new Rule(selector, properties, rules);\n  }\n\n  private parseSelector(): Selector {\n    const tag = this.consume(CSSToken.IDENTIFIER);\n    const classes = this.parseClassSet();\n    const id = this.parseOptionalId();\n\n    return new Selector(tag.value, classes, id);\n  }\n\n  private parsePropertySet(): Set<Property> {\n    return this.parseSet(this.parseProperty);\n  }\n\n  private parseProperty(): Property {\n    const key = this.parseIdentifier();\n    this.consume(CSSToken.COLON);\n\n    const value = this.parseOneOf(this.parseColor, this.parseNumber, this.parseIdentifier);\n    this.consume(CSSToken.SEMI);\n\n    return new Property(key, value);\n  }\n\n  private parseClassSet(): Set<string> {\n    return this.parseSet(this.parseClass);\n  }\n\n  private parseClass(): string {\n    this.consume(CSSToken.DOT);\n    const className = this.consume(CSSToken.IDENTIFIER);\n    return className.value;\n  }\n\n  private parseOptionalId(): string | undefined {\n    return this.parseOptional(this.parseId);\n  }\n\n  private parseId(): string {\n    this.consume(CSSToken.HASH);\n    const id = this.consume(CSSToken.IDENTIFIER);\n    return id.value;\n  }\n\n  private parseColor(): Color {\n    const color = this.consume(CSSToken.COLOR);\n    return Color.fromHexString(color.value);\n  }\n\n  private parseNumber(): number {\n    const number = this.consume(CSSToken.NUMBER);\n    return parseFloat(number.value);\n  }\n\n  private parseIdentifier(): string {\n    const identifier = this.consume(CSSToken.IDENTIFIER);\n    return identifier.value;\n  }\n}\n\nexport default CSSParser;\n","import { Anchor } from \"../model\";\n\nexport function qsin(anchor: Anchor): number {\n  if ((anchor + 6) % 16 < 5) {\n    return 0;\n  }\n\n  if ((anchor + 14) % 16 < 5) {\n    return 1;\n  }\n\n  switch (anchor) {\n    case Anchor.NNW:\n    case Anchor.SSW:\n      return 1 / 4;\n    case Anchor.N:\n    case Anchor.S:\n      return 1 / 2;\n    case Anchor.NNE:\n    case Anchor.SSE:\n      return 3 / 4;\n  }\n\n  throw new Error();\n}\n\nexport function qcos(anchor: Anchor): number {\n  if ((anchor + 2) % 16 < 5) {\n    return 0;\n  }\n\n  if ((anchor + 10) % 16 < 5) {\n    return 1;\n  }\n\n  switch (anchor) {\n    case Anchor.ENE:\n    case Anchor.WNW:\n      return 1 / 4;\n    case Anchor.E:\n    case Anchor.W:\n      return 1 / 2;\n    case Anchor.ESE:\n    case Anchor.WSW:\n      return 3 / 4;\n  }\n\n  throw new Error();\n}\n","import Element from \"./Element\";\nimport Renderer from \"./Renderer\";\n\nabstract class AbstractElement implements Element {\n  private readonly children = new Set<Element>();\n  private hovered = false;\n  private selected = false;\n\n  abstract render(renderer: Renderer): void;\n\n  getChildren(): readonly Element[] {\n    return [...this.children];\n  }\n\n  addChild(child: Element): this {\n    this.children.add(child);\n    return this;\n  }\n\n  deleteChild(child: Element): boolean {\n    return this.children.delete(child);\n  }\n\n  *[Symbol.iterator](): Iterator<Element> {\n    for (const child of [...this.children].reverse()) {\n      yield* child;\n    }\n    yield this;\n  }\n\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  setHovered(hovered: boolean): void {\n    this.hovered = hovered;\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  setSelected(selected: boolean): void {\n    this.selected = selected;\n  }\n}\n\nexport default AbstractElement;\n","enum Shape {\n  RECTANGLE,\n  ELLIPSE,\n  NOTE,\n  FOLDER,\n  BOX,\n  FILE,\n  COMPONENT,\n}\n\nexport default Shape;\n","enum LinePattern {\n  SOLID,\n  DOTS,\n  SMALL_DASHES,\n  LARGE_DASHES,\n  TIGHT_DASHES,\n}\n\nexport default LinePattern;\n","import { qcos, qsin } from \"../renderer/anchors\";\nimport AbstractElement from \"./AbstractElement\";\nimport Anchor from \"./Anchor\";\nimport Rectangle from \"./Rectangle\";\nimport Renderer from \"./Renderer\";\nimport Shape from \"./Shape\";\n\nclass Classifier extends AbstractElement {\n  private readonly anchor: Anchor;\n  x: number;\n  y: number;\n  private width: number;\n  private height: number;\n  shape: Shape = Shape.RECTANGLE;\n\n  constructor(anchor: Anchor, x: number, y: number, width: number, height: number) {\n    super();\n    this.anchor = anchor;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getTagName(): string {\n    return \"Classifier\";\n  }\n\n  getRectangle(): Rectangle {\n    return {\n      x: this.getLeft(),\n      y: this.getTop(),\n      width: this.width,\n      height: this.height,\n    };\n  }\n\n  getWidth(): number {\n    return this.width;\n  }\n\n  setWidth(width: number): void {\n    this.width = width;\n  }\n\n  getX(): number {\n    return this.x;\n  }\n\n  getY(): number {\n    return this.y;\n  }\n\n  getHeight(): number {\n    return this.height;\n  }\n\n  setHeight(height: number): void {\n    this.height = height;\n  }\n\n  getLeft(): number {\n    return this.x - this.width * qsin(this.anchor);\n  }\n\n  setLeft(left: number): void {\n    this.x = left + this.width * qsin(this.anchor);\n  }\n\n  getCenterX(): number {\n    return this.getLeft() + this.width / 2;\n  }\n\n  getRight(): number {\n    return this.getLeft() + this.width;\n  }\n\n  getTop(): number {\n    return this.y - this.height * qcos(this.anchor);\n  }\n\n  setTop(top: number): void {\n    this.y = top + this.height * qcos(this.anchor);\n  }\n\n  getCenterY(): number {\n    return this.getTop() + this.height / 2;\n  }\n\n  getBottom(): number {\n    return this.getTop() + this.height;\n  }\n\n  render(renderer: Renderer): void {\n    renderer.renderClassifier(this);\n  }\n}\n\nexport default Classifier;\n","import { Predicate } from \"../utils\";\nimport AbstractElement from \"./AbstractElement\";\nimport Classifier from \"./Classifier\";\nimport Element from \"./Element\";\nimport Renderer from \"./Renderer\";\n\nclass Diagram extends AbstractElement {\n  render(renderer: Renderer): void {\n    renderer.renderDiagram(this);\n  }\n\n  find(predicate: Predicate<Element>): Element | undefined {\n    return this.findElement(this, predicate);\n  }\n\n  private findElement(element: Element, predicate: Predicate<Element>): Element | undefined {\n    const result = predicate(element);\n    if (result) {\n      return element;\n    }\n\n    for (const child of element.getChildren()) {\n      const result = this.findElement(child, predicate);\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    return undefined;\n  }\n\n  getWidth(): number {\n    return this.getRight() - this.getLeft();\n  }\n\n  getHeight(): number {\n    return this.getBottom() - this.getTop();\n  }\n\n  getTop(): number {\n    return this.reduceClassifiers((acc, classifier) => {\n      const top = classifier.getTop();\n      return acc > top ? top : acc;\n    }, Infinity);\n  }\n\n  getBottom(): number {\n    return this.reduceClassifiers((acc, classifier) => {\n      const bottom = classifier.getBottom();\n      return acc < bottom ? bottom : acc;\n    }, -Infinity);\n  }\n\n  getLeft(): number {\n    return this.reduceClassifiers((acc, classifier) => {\n      const left = classifier.getLeft();\n      return acc > left ? left : acc;\n    }, Infinity);\n  }\n\n  getRight(): number {\n    return this.reduceClassifiers((acc, classifier) => {\n      const right = classifier.getRight();\n      return acc < right ? right : acc;\n    }, -Infinity);\n  }\n\n  private reduceClassifiers(\n    reducer: (acc: number, classifier: Classifier) => number,\n    seed: number,\n  ): number {\n    let acc = seed;\n    for (const classifier of this.getChildren()) {\n      if (classifier instanceof Classifier) {\n        acc = reducer(acc, classifier);\n      }\n    }\n\n    if (acc === seed) {\n      return 0;\n    }\n\n    return acc;\n  }\n}\n\nexport default Diagram;\n","enum Tip {\n  NONE,\n  ARROW,\n  TRIANGLE,\n  FILLED_TRIANGLE,\n  DIAMOND,\n  FILLED_DIAMOND,\n  CIRCLE,\n  FILLED_CIRCLE,\n}\n\nexport default Tip;\n","import { qcos, qsin } from \"../renderer/anchors\";\nimport AbstractElement from \"./AbstractElement\";\nimport Anchor from \"./Anchor\";\nimport Classifier from \"./Classifier\";\nimport LinePattern from \"./LinePattern\";\nimport Renderer from \"./Renderer\";\nimport Tip from \"./Tip\";\n\nclass Relationship extends AbstractElement {\n  from: Classifier;\n  fromAnchor: Anchor;\n  fromTip: Tip = Tip.NONE;\n  to: Classifier;\n  toAnchor: Anchor;\n  toTip: Tip = Tip.NONE;\n  linePattern: LinePattern = LinePattern.SOLID;\n\n  constructor(from: Classifier, fromAnchor: Anchor, to: Classifier, toAnchor: Anchor) {\n    super();\n    this.from = from;\n    this.fromAnchor = fromAnchor;\n    this.to = to;\n    this.toAnchor = toAnchor;\n  }\n\n  getX1(): number {\n    return this.from.getLeft() + qsin(this.fromAnchor) * this.from.getWidth();\n  }\n\n  getY1(): number {\n    return this.from.getTop() + qcos(this.fromAnchor) * this.from.getHeight();\n  }\n\n  getX2(): number {\n    return this.to.getLeft() + qsin(this.toAnchor) * this.to.getWidth();\n  }\n\n  getY2(): number {\n    return this.to.getTop() + qcos(this.toAnchor) * this.to.getHeight();\n  }\n\n  getAngle(): number {\n    return Math.atan2(this.getY2() - this.getY1(), this.getX2() - this.getX1());\n  }\n\n  render(renderer: Renderer): void {\n    renderer.renderRelationship(this);\n  }\n}\n\nexport default Relationship;\n","import AbstractElement from \"./AbstractElement\";\nimport Renderer from \"./Renderer\";\n\nclass Separator extends AbstractElement {\n  render(renderer: Renderer): void {\n    renderer.renderSeparator(this);\n  }\n}\n\nexport default Separator;\n","import AbstractElement from \"./AbstractElement\";\nimport Renderer from \"./Renderer\";\n\nclass Stereotype extends AbstractElement {\n  render(renderer: Renderer): void {\n    renderer.renderStereotype(this);\n  }\n}\n\nexport default Stereotype;\n","import AbstractElement from \"./AbstractElement\";\nimport Renderer from \"./Renderer\";\n\nclass Text extends AbstractElement {\n  readonly text: string;\n\n  constructor(text: string) {\n    super();\n    this.text = text;\n  }\n\n  render(renderer: Renderer): void {\n    renderer.renderText(this);\n  }\n}\n\nexport default Text;\n","import Text from \"./Text\";\nimport Renderer from \"./Renderer\";\n\nclass Title extends Text {\n  render(renderer: Renderer): void {\n    renderer.renderTitle(this);\n  }\n}\n\nexport default Title;\n","import { Classifier } from \"../model\";\nimport * as Model from \"../model\";\n\ninterface Class<T> {\n  new (...args: any[]): T;\n}\n\nclass Serializer {\n  private readonly parser: DOMParser;\n  private readonly serializer: XMLSerializer;\n  private readonly elementMap = new Map<Element, Model.Element>();\n\n  constructor() {\n    this.parser = new DOMParser();\n    this.serializer = new XMLSerializer();\n  }\n\n  deserialize(xml: string): Model.Diagram {\n    this.elementMap.clear();\n    const document = this.parser.parseFromString(xml, \"text/xml\");\n    const diagram = this.parseElement(document.documentElement);\n    if (!(diagram instanceof Model.Diagram)) {\n      return new Model.Diagram();\n    }\n\n    return diagram;\n  }\n\n  serialize(diagram: Model.Diagram): string {\n    if (this.hasElement(diagram)) {\n      const root = this.getElement(diagram)!;\n      return this.serializer.serializeToString(root);\n    }\n\n    return \"\";\n  }\n\n  updateElement(element: Model.Element): void {\n    if (this.hasElement(element)) {\n      const xmlElement = this.getElement(element)!;\n      if (element instanceof Classifier) {\n        this.setClassifier(xmlElement, element);\n      }\n    }\n  }\n\n  private parseElement(element: Element): Model.Element {\n    if (this.elementMap.has(element)) {\n      return this.elementMap.get(element)!;\n    }\n\n    const parsed = this.doParseElement(element);\n    this.elementMap.set(element, parsed);\n    return parsed;\n  }\n\n  protected doParseElement(element: Element): Model.Element {\n    switch (element.tagName) {\n      case \"Diagram\":\n        return this.parseDiagram(element);\n      case \"Classifier\":\n        return this.parseClassifier(Model.Classifier, element);\n      case \"Relationship\":\n        return this.parseRelationship(Model.Relationship, element);\n      case \"Title\":\n        return this.parseTitle(element);\n      case \"Method\":\n      case \"Text\":\n        return this.parseText(element);\n      case \"Separator\":\n        return new Model.Separator();\n      case \"Stereotype\":\n        return new Model.Stereotype();\n    }\n\n    throw new Error(`Unknown tag: ${element.tagName}`);\n  }\n\n  private parseDiagram(element: Element): Model.Diagram {\n    const diagram = new Model.Diagram();\n    this.parseChildren(element, diagram);\n    return diagram;\n  }\n\n  protected parseClassifier<C extends Model.Classifier>(\n    constructor: Class<C>,\n    element: Element,\n  ): C {\n    const anchor = this.parseAnchorAttribute(element, \"anchor\");\n    const x = this.parseIntAttribute(element, \"x\", 0);\n    const y = this.parseIntAttribute(element, \"y\", 0);\n    const width = this.parseIntAttribute(element, \"width\", 200);\n    const height = this.parseIntAttribute(element, \"height\", 120);\n    const classifier = new constructor(anchor, x, y, width, height);\n    classifier.shape = this.parseEnumAttribute(Model.Shape, element, \"shape\", classifier.shape);\n    this.parseChildren(element, classifier);\n    return classifier;\n  }\n\n  protected setClassifier(element: Element, classifier: Classifier): void {\n    this.setIntAttribute(element, \"x\", 0, classifier.getX());\n    this.setIntAttribute(element, \"y\", 0, classifier.getY());\n    this.setIntAttribute(element, \"width\", 200, classifier.getWidth());\n    this.setIntAttribute(element, \"height\", 120, classifier.getHeight());\n  }\n\n  protected parseRelationship<R extends Model.Relationship>(\n    constructor: Class<R>,\n    element: Element,\n  ): R {\n    const from = this.parseClassifierAttribute(element, \"from\");\n    const fromAnchor = this.parseAnchorAttribute(element, \"fromAnchor\");\n    const to = this.parseClassifierAttribute(element, \"to\");\n    const toAnchor = this.parseAnchorAttribute(element, \"toAnchor\");\n    const relationship = new constructor(from, fromAnchor, to, toAnchor);\n    relationship.fromTip = this.parseTipAttribute(element, \"fromTip\", relationship.fromTip);\n    relationship.toTip = this.parseTipAttribute(element, \"toTip\", relationship.toTip);\n    relationship.linePattern = this.parseLinePatternAttribute(\n      element,\n      \"linePattern\",\n      relationship.linePattern,\n    );\n    return relationship;\n  }\n\n  private parseTitle(element: Element): Model.Title {\n    const text = element.textContent ?? \"\";\n    return new Model.Title(text);\n  }\n\n  private parseText(element: Element): Model.Text {\n    const text = element.textContent ?? \"\";\n    return new Model.Text(text);\n  }\n\n  private parseChildren(element: Element, target: Model.Element) {\n    for (const child of element.children) {\n      try {\n        target.addChild(this.parseElement(child));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  private parseClassifierAttribute(element: Element, attribute: string): Model.Classifier {\n    if (element.hasAttribute(attribute)) {\n      const id = element.getAttribute(attribute)!;\n      const elementById = element.ownerDocument.getElementById(id);\n      if (elementById !== null) {\n        const classifier = this.parseElement(elementById);\n        if (classifier instanceof Model.Classifier) {\n          return classifier;\n        }\n      }\n    }\n\n    throw new Error(\n      `Invalid classifier: <${element.tagName} ${attribute}=\"${element.getAttribute(\n        attribute,\n      )}\" />`,\n    );\n  }\n\n  private parseAnchorAttribute(element: Element, attribute: string): Model.Anchor {\n    return this.parseEnumAttribute(Model.Anchor, element, attribute, Model.Anchor.S);\n  }\n\n  private parseTipAttribute(element: Element, attribute: string, fallback: Model.Tip): Model.Tip {\n    return this.parseEnumAttribute(Model.Tip, element, attribute, fallback);\n  }\n\n  private parseLinePatternAttribute(\n    element: Element,\n    attribute: string,\n    fallback: Model.LinePattern,\n  ): Model.LinePattern {\n    return this.parseEnumAttribute(Model.LinePattern, element, attribute, fallback);\n  }\n\n  private parseEnumAttribute<E>(\n    enumClass: Record<string, unknown>,\n    element: Element,\n    attribute: string,\n    fallback: E,\n  ): E {\n    if (element.hasAttribute(attribute)) {\n      const value = element.getAttribute(attribute)!;\n      const item = Reflect.get(enumClass, value.toUpperCase());\n      if (item !== undefined) {\n        return item;\n      }\n    }\n\n    return fallback;\n  }\n\n  private parseIntAttribute(element: Element, attribute: string, fallback: number): number {\n    if (element.hasAttribute(attribute)) {\n      const value = parseInt(element.getAttribute(attribute)!, 10);\n      if (!Number.isNaN(value)) {\n        return value;\n      }\n    }\n\n    return fallback;\n  }\n\n  private setIntAttribute(\n    element: Element,\n    attribute: string,\n    fallback: number,\n    value: number,\n  ): void {\n    if (value !== fallback) {\n      element.setAttribute(attribute, String(value));\n    } else {\n      element.removeAttribute(attribute);\n    }\n  }\n\n  private hasElement(element: Model.Element): boolean {\n    for (const value of this.elementMap.values()) {\n      if (value === element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private getElement(element: Model.Element): Element | undefined {\n    for (const [xmlElement, el] of this.elementMap) {\n      if (el === element) {\n        return xmlElement;\n      }\n    }\n    return undefined;\n  }\n}\n\nexport default Serializer;\n","import { Relationship, Tip } from \"../model\";\n\nclass Aggregation extends Relationship {\n  toTip: Tip = Tip.DIAMOND;\n}\n\nexport default Aggregation;\n","import { LinePattern, Relationship } from \"../model\";\n\nclass Anchor extends Relationship {\n  linePattern: LinePattern = LinePattern.DOTS;\n}\n\nexport default Anchor;\n","import { Relationship } from \"../model\";\n\nclass Association extends Relationship {}\n\nexport default Association;\n","import { Classifier } from \"../model\";\n\nclass Class extends Classifier {\n  getTagName(): string {\n    return \"Class\";\n  }\n}\n\nexport default Class;\n","import { Classifier, Shape } from \"../model\";\n\nclass Component extends Classifier {\n  shape: Shape = Shape.COMPONENT;\n\n  getTagName(): string {\n    return \"Component\";\n  }\n}\n\nexport default Component;\n","import { Relationship, Tip } from \"../model\";\n\nclass Composition extends Relationship {\n  toTip: Tip = Tip.FILLED_DIAMOND;\n}\n\nexport default Composition;\n","import { Classifier } from \"../model\";\n\nclass DataType extends Classifier {\n  getTagName(): string {\n    return \"DataType\";\n  }\n}\n\nexport default DataType;\n","import { LinePattern, Relationship, Tip } from \"../model\";\n\nclass Dependency extends Relationship {\n  toTip: Tip = Tip.ARROW;\n  linePattern: LinePattern = LinePattern.TIGHT_DASHES;\n}\n\nexport default Dependency;\n","import { Relationship, Tip } from \"../model\";\n\nclass DirectedAssociation extends Relationship {\n  toTip: Tip = Tip.ARROW;\n}\n\nexport default DirectedAssociation;\n","import { Classifier } from \"../model\";\n\nclass Enumeration extends Classifier {\n  getTagName(): string {\n    return \"Enumeration\";\n  }\n}\n\nexport default Enumeration;\n","import { Relationship, Tip } from \"../model\";\n\nclass Generalization extends Relationship {\n  toTip: Tip = Tip.TRIANGLE;\n}\n\nexport default Generalization;\n","import { LinePattern, Relationship, Tip } from \"../model\";\n\nclass Implementation extends Relationship {\n  toTip: Tip = Tip.TRIANGLE;\n  linePattern: LinePattern = LinePattern.TIGHT_DASHES;\n}\n\nexport default Implementation;\n","import { Classifier } from \"../model\";\n\nclass Interface extends Classifier {\n  getTagName(): string {\n    return \"Interface\";\n  }\n}\n\nexport default Interface;\n","import { Classifier, Shape } from \"../model\";\n\nclass Note extends Classifier {\n  shape: Shape = Shape.NOTE;\n\n  getTagName(): string {\n    return \"Note\";\n  }\n}\n\nexport default Note;\n","import { Classifier, Shape } from \"../model\";\n\nclass Package extends Classifier {\n  shape: Shape = Shape.FOLDER;\n\n  getTagName(): string {\n    return \"Package\";\n  }\n}\n\nexport default Package;\n","import { Classifier } from \"../model\";\n\nclass Primitive extends Classifier {\n  getTagName(): string {\n    return \"Primitive\";\n  }\n}\n\nexport default Primitive;\n","import UMLSerializer from \"./UMLSerializer\";\n\nexport const serializer = new UMLSerializer();\n","import Serializer from \"./Serializer\";\nimport * as Model from \"../model\";\nimport * as UML from \"../uml\";\n\nclass UMLSerializer extends Serializer {\n  protected doParseElement(element: Element): Model.Element {\n    switch (element.tagName) {\n      case \"Aggregation\":\n        return this.parseRelationship(UML.Aggregation, element);\n      case \"Anchor\":\n        return this.parseRelationship(UML.Anchor, element);\n      case \"Association\":\n        return this.parseRelationship(UML.Association, element);\n      case \"Class\":\n        return this.parseClassifier(UML.Class, element);\n      case \"Component\":\n        return this.parseClassifier(UML.Component, element);\n      case \"Composition\":\n        return this.parseRelationship(UML.Composition, element);\n      case \"DataType\":\n        return this.parseClassifier(UML.DataType, element);\n      case \"Dependency\":\n        return this.parseRelationship(UML.Dependency, element);\n      case \"DirectedAssociation\":\n        return this.parseRelationship(UML.DirectedAssociation, element);\n      case \"Enumeration\":\n        return this.parseClassifier(UML.Enumeration, element);\n      case \"Generalization\":\n        return this.parseRelationship(UML.Generalization, element);\n      case \"Implementation\":\n        return this.parseRelationship(UML.Implementation, element);\n      case \"Interface\":\n        return this.parseClassifier(UML.Interface, element);\n      case \"Note\":\n        return this.parseClassifier(UML.Note, element);\n      case \"Package\":\n        return this.parseClassifier(UML.Package, element);\n      case \"Primitive\":\n        return this.parseClassifier(UML.Primitive, element);\n      default:\n        return super.doParseElement(element);\n    }\n  }\n}\n\nexport default UMLSerializer;\n","import { ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\nfunction ContainerFluid({ children }: Props) {\n  return <div className=\"container-fluid\">{children}</div>;\n}\n\nexport default ContainerFluid;\n","export default __webpack_public_path__ + \"static/media/logo.4da087a9.png\";","import { ReactNode } from \"react\";\nimport ContainerFluid from \"./ContainerFluid\";\nimport logo from \"./logo.png\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\nfunction MenuBar({ children }: Props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\" style={{ gridArea: \"menu\" }}>\n      <ContainerFluid>\n        <span className=\"navbar-brand\">\n          <img alt=\"Logo\" src={logo} height={32} width={32} className=\"d-inline-block align-top\" />{\" \"}\n          UML Editor\n        </span>\n        <ul className=\"navbar-nav me-auto\">{children}</ul>\n      </ContainerFluid>\n    </nav>\n  );\n}\n\nexport default MenuBar;\n","import { useRef } from \"react\";\n\nfunction useId(prefix: string): string {\n  const ref = useRef(`${prefix}-${Math.random().toString(36).substring(2)}`);\n\n  return ref.current!;\n}\n\nexport default useId;\n","import { ReactNode } from \"react\";\n\ninterface Props {\n  labelledBy: string;\n  children?: ReactNode;\n}\n\nfunction DropdownMenu({ labelledBy, children }: Props) {\n  return (\n    <ul className=\"dropdown-menu\" aria-labelledby={labelledBy}>\n      {children}\n    </ul>\n  );\n}\n\nexport default DropdownMenu;\n","import { Dropdown } from \"bootstrap\";\nimport classNames from \"classnames\";\nimport { ReactNode, useRef } from \"react\";\n\ninterface Props {\n  id?: string;\n  className?: string;\n  children?: ReactNode;\n}\n\nfunction DropdownToggle({ id, className, children }: Props) {\n  const dropdown = useRef<Dropdown | null>(null);\n\n  function handleRef(element: HTMLButtonElement | null): void {\n    if (element === null) {\n      dropdown.current?.dispose();\n      dropdown.current = null;\n    } else {\n      dropdown.current = new Dropdown(element);\n    }\n  }\n\n  return (\n    <button\n      id={id}\n      ref={handleRef}\n      aria-expanded=\"false\"\n      data-bs-toggle=\"dropdown\"\n      className={classNames(\"btn\", \"btn-link\", \"dropdown-toggle\", className)}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default DropdownToggle;\n","import classNames from \"classnames\";\nimport { ReactNode } from \"react\";\nimport { useId } from \"../../hooks\";\nimport DropdownMenu from \"./DropdownMenu\";\nimport DropdownToggle from \"./DropdownToggle\";\n\ninterface Props {\n  active?: boolean;\n  title: string;\n  children?: ReactNode;\n}\n\nfunction Menu({ active = false, title, children }: Props) {\n  const id = useId(\"Menu\");\n\n  return (\n    <li className=\"nav-item dropdown\">\n      <DropdownToggle id={id} className={classNames(\"nav-link\", { active })}>\n        {title}\n      </DropdownToggle>\n      <DropdownMenu labelledBy={id}>{children}</DropdownMenu>\n    </li>\n  );\n}\n\nexport default Menu;\n","import classNames from \"classnames\";\nimport { ReactNode } from \"react\";\nimport \"./SplitView.css\";\n\ninterface Props {\n  direction: \"horizontal\" | \"vertical\";\n  children: ReactNode;\n}\n\nfunction SplitView({ direction, children }: Props) {\n  return <div className={classNames(\"SplitView\", direction)}>{children}</div>;\n}\n\nexport default SplitView;\n","export const PADDING = 10;\nexport const HANDLE_RADIUS = 4.5;\n","import { Color } from \"../css\";\nimport { Classifier, ClassifierRenderer, Renderer, Shape } from \"../model\";\nimport { PADDING } from \"./constants\";\nimport RenderContext from \"./RenderContext\";\n\nclass CanvasClassifierRenderer implements ClassifierRenderer {\n  private readonly renderer: Renderer;\n  private readonly context: RenderContext;\n  private readonly canvas: CanvasRenderingContext2D;\n\n  constructor(renderer: Renderer, context: RenderContext, canvas: CanvasRenderingContext2D) {\n    this.renderer = renderer;\n    this.context = context;\n    this.canvas = canvas;\n  }\n\n  renderClassifier(classifier: Classifier): void {\n    this.context.push(\n      classifier.getTagName(),\n      classifier.getWidth() - 2 * PADDING,\n      classifier.getHeight() - 2 * PADDING,\n    );\n\n    this.canvas.save();\n    this.canvas.translate(classifier.getLeft(), classifier.getTop());\n    this.applyStyle(classifier);\n    this.drawShape(classifier);\n    this.canvas.fill();\n    this.canvas.stroke();\n    this.canvas.clip();\n\n    this.canvas.translate(PADDING, PADDING);\n    for (const child of classifier.getChildren()) {\n      child.render(this.renderer);\n    }\n\n    this.canvas.restore();\n\n    this.context.pop();\n  }\n\n  isPointInClassifier(classifier: Classifier, x: number, y: number): boolean {\n    this.canvas.save();\n    this.canvas.translate(classifier.getLeft(), classifier.getTop());\n    this.drawShape(classifier);\n    const result = this.canvas.isPointInPath(x, y);\n    this.canvas.restore();\n\n    return result;\n  }\n\n  private applyStyle(classifier: Classifier): void {\n    const properties = this.context.getStyleProperties();\n    this.canvas.lineWidth = properties.getFloat(\"line-width\", 1.5);\n    this.canvas.strokeStyle = properties.getColor(\"stroke\", Color.DARK).toHexString();\n    let fill = properties.getColor(\"fill\", Color.WHITE);\n    if (classifier.isHovered()) {\n      fill = fill.mix(Color.CYAN, 0.25);\n    }\n    this.canvas.fillStyle = fill.toHexString();\n  }\n\n  private drawShape(classifier: Classifier): void {\n    this.canvas.beginPath();\n    switch (classifier.shape) {\n      case Shape.RECTANGLE:\n        this.drawRectangleShape(classifier);\n        return;\n      case Shape.ELLIPSE:\n        this.drawEllipseShape(classifier);\n        return;\n      case Shape.FOLDER:\n        this.drawFolderShape(classifier);\n        return;\n      case Shape.NOTE:\n        this.drawNoteShape(classifier);\n        return;\n      case Shape.BOX:\n        this.drawBoxShape(classifier);\n        return;\n      case Shape.FILE:\n        this.drawFileShape(classifier);\n        return;\n      case Shape.COMPONENT:\n        this.drawComponentShape(classifier);\n        return;\n    }\n  }\n\n  private drawBoxShape(classifier: Classifier) {\n    const BOX_DEPTH = 20;\n    const w = classifier.getWidth();\n    const h = classifier.getHeight();\n    this.canvas.rect(0, 0, w, h);\n\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(w, 0);\n    this.canvas.lineTo(w + BOX_DEPTH, -BOX_DEPTH);\n    this.canvas.lineTo(BOX_DEPTH, -BOX_DEPTH);\n    this.canvas.closePath();\n\n    this.canvas.moveTo(w, 0);\n    this.canvas.lineTo(w, h);\n    this.canvas.lineTo(w + BOX_DEPTH, h - BOX_DEPTH);\n    this.canvas.lineTo(w + BOX_DEPTH, -BOX_DEPTH);\n    this.canvas.closePath();\n  }\n\n  private drawRectangleShape(classifier: Classifier) {\n    this.canvas.rect(0, 0, classifier.getWidth(), classifier.getHeight());\n  }\n\n  private drawEllipseShape(classifier: Classifier) {\n    const w = classifier.getWidth();\n    const h = classifier.getHeight();\n    this.canvas.ellipse(w / 2, h / 2, w / 2, h / 2, 0, 0, 2 * Math.PI);\n  }\n\n  private drawFolderShape(classifier: Classifier) {\n    const FOLDER_WIDTH = 80;\n    const FOLDER_HEIGHT = 20;\n    this.canvas.rect(0, -FOLDER_HEIGHT, FOLDER_WIDTH, FOLDER_HEIGHT);\n    this.canvas.rect(0, 0, classifier.getWidth(), classifier.getHeight());\n  }\n\n  private drawNoteShape(classifier: Classifier) {\n    const NOTE_SIZE = 30;\n    const w = classifier.getWidth();\n    const h = classifier.getHeight();\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(0, h);\n    this.canvas.lineTo(w - NOTE_SIZE, h);\n    this.canvas.lineTo(w, h - NOTE_SIZE);\n    this.canvas.lineTo(w, 0);\n    this.canvas.closePath();\n\n    this.canvas.moveTo(w - NOTE_SIZE, h);\n    this.canvas.lineTo(w, h - NOTE_SIZE);\n    this.canvas.lineTo(w - NOTE_SIZE, h - NOTE_SIZE);\n    this.canvas.closePath();\n  }\n\n  private drawFileShape(classifier: Classifier) {\n    const w = classifier.getWidth();\n    const h = classifier.getHeight();\n    const FILE_SIZE = 30;\n    this.canvas.moveTo(FILE_SIZE, 0);\n    this.canvas.lineTo(0, FILE_SIZE);\n    this.canvas.lineTo(0, h);\n    this.canvas.lineTo(w, h);\n    this.canvas.lineTo(w, 0);\n    this.canvas.closePath();\n\n    this.canvas.moveTo(FILE_SIZE, 0);\n    this.canvas.lineTo(0, FILE_SIZE);\n    this.canvas.lineTo(FILE_SIZE, FILE_SIZE);\n    this.canvas.closePath();\n  }\n\n  private drawComponentShape(classifier: Classifier) {\n    const w = classifier.getWidth();\n    const h = classifier.getHeight();\n    const COMPONENT_WIDTH = 40;\n    const COMPONENT_HEIGHT = 20;\n    const COMPONENT_Y = (h - COMPONENT_HEIGHT * 3) / 2;\n\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(0, COMPONENT_Y);\n    this.canvas.lineTo(COMPONENT_WIDTH / 2, COMPONENT_Y);\n    this.canvas.lineTo(COMPONENT_WIDTH / 2, COMPONENT_Y + COMPONENT_HEIGHT);\n    this.canvas.lineTo(0, COMPONENT_Y + COMPONENT_HEIGHT);\n    this.canvas.lineTo(0, COMPONENT_Y + COMPONENT_HEIGHT * 2);\n    this.canvas.lineTo(COMPONENT_WIDTH / 2, COMPONENT_Y + COMPONENT_HEIGHT * 2);\n    this.canvas.lineTo(COMPONENT_WIDTH / 2, COMPONENT_Y + COMPONENT_HEIGHT * 3);\n    this.canvas.lineTo(0, COMPONENT_Y + COMPONENT_HEIGHT * 3);\n    this.canvas.lineTo(0, h);\n    this.canvas.lineTo(w, h);\n    this.canvas.lineTo(w, 0);\n    this.canvas.closePath();\n\n    this.canvas.rect(COMPONENT_WIDTH / -2, COMPONENT_Y, COMPONENT_WIDTH, COMPONENT_HEIGHT);\n    this.canvas.rect(\n      COMPONENT_WIDTH / -2,\n      COMPONENT_Y + 2 * COMPONENT_HEIGHT,\n      COMPONENT_WIDTH,\n      COMPONENT_HEIGHT,\n    );\n  }\n}\n\nexport default CanvasClassifierRenderer;\n","import { Anchor } from \"../model\";\n\nclass Handle {\n  readonly x: number;\n  readonly y: number;\n  readonly anchor: Anchor;\n\n  constructor(x: number, y: number, anchor: Anchor) {\n    this.x = x;\n    this.y = y;\n    this.anchor = anchor;\n  }\n}\n\nexport default Handle;\n","import { PropertyMap, Style } from \"../css\";\n\nclass RenderContext {\n  private readonly width: number[];\n  private readonly height: number[];\n  private readonly context: string[];\n  private readonly style: Style;\n\n  constructor(canvasWidth: number, canvasHeight: number, style: Style) {\n    this.width = [canvasWidth];\n    this.height = [canvasHeight];\n    this.context = [];\n    this.style = style;\n  }\n\n  push(name: string, width?: number, height?: number): void {\n    this.context.unshift(name);\n    this.width.unshift(width ?? this.getWidth());\n    this.height.unshift(height ?? this.getHeight());\n  }\n\n  pop(): void {\n    this.context.shift();\n    this.width.shift();\n    this.height.shift();\n  }\n\n  getName(): string {\n    return this.context[0];\n  }\n\n  getWidth(): number {\n    return this.width[0];\n  }\n\n  getHeight(): number {\n    return this.height[0];\n  }\n\n  getStyleProperties(): PropertyMap {\n    return this.style.getProperties([...this.context].reverse());\n  }\n}\n\nexport default RenderContext;\n","import { Color, Style } from \"../css\";\nimport {\n  Anchor,\n  Classifier,\n  Diagram,\n  LinePattern,\n  Relationship,\n  Renderer,\n  Separator,\n  Stereotype,\n  Text,\n  Tip,\n  Title,\n} from \"../model\";\nimport CanvasClassifierRenderer from \"./CanvasClassifierRenderer\";\nimport CanvasOptions from \"./CanvasOptions\";\nimport { HANDLE_RADIUS, PADDING } from \"./constants\";\nimport Handle from \"./Handle\";\nimport RenderContext from \"./RenderContext\";\n\nclass CanvasRenderer implements Renderer {\n  private readonly context: RenderContext;\n  private readonly canvas: CanvasRenderingContext2D;\n  private readonly classifierRenderer: CanvasClassifierRenderer;\n  private readonly translateX: number;\n  private readonly translateY: number;\n\n  constructor(canvas: HTMLCanvasElement, style: Style, options: CanvasOptions) {\n    this.context = new RenderContext(canvas.width, canvas.height, style);\n    this.translateX = options.translateX;\n    this.translateY = options.translateY;\n    this.canvas = canvas.getContext(\"2d\")!;\n    this.classifierRenderer = new CanvasClassifierRenderer(this, this.context, this.canvas);\n  }\n\n  renderDiagram(diagram: Diagram): void {\n    this.canvas.clearRect(0, 0, this.context.getWidth(), this.context.getHeight());\n    this.canvas.save();\n    this.canvas.translate(this.translateX, this.translateY);\n    for (const child of diagram.getChildren()) {\n      child.render(this);\n    }\n    this.renderHandles(diagram);\n    this.canvas.restore();\n  }\n\n  renderClassifier(classifier: Classifier): void {\n    this.classifierRenderer.renderClassifier(classifier);\n  }\n\n  isPointInClassifier(classifier: Classifier, x: number, y: number): boolean {\n    return this.classifierRenderer.isPointInClassifier(classifier, x, y);\n  }\n\n  renderRelationship(relationship: Relationship): void {\n    this.canvas.save();\n    this.canvas.beginPath();\n    this.canvas.moveTo(relationship.getX1(), relationship.getY1());\n    this.canvas.lineTo(relationship.getX2(), relationship.getY2());\n    this.applyRelationshipStyle(relationship);\n    this.canvas.stroke();\n    this.drawFromTip(relationship);\n    this.drawToTip(relationship);\n    this.canvas.restore();\n  }\n\n  private applyRelationshipStyle(relationship: Relationship): void {\n    this.canvas.lineWidth = 1.5;\n    this.canvas.strokeStyle = \"#212529\";\n    this.canvas.fillStyle = \"white\";\n    switch (relationship.linePattern) {\n      case LinePattern.SOLID:\n        this.canvas.setLineDash([]);\n        break;\n      case LinePattern.DOTS:\n        this.canvas.setLineDash([2, 2]);\n        break;\n      case LinePattern.SMALL_DASHES:\n        this.canvas.setLineDash([5, 5]);\n        break;\n      case LinePattern.LARGE_DASHES:\n        this.canvas.setLineDash([10, 10]);\n        break;\n      case LinePattern.TIGHT_DASHES:\n        this.canvas.setLineDash([15, 5]);\n        break;\n    }\n  }\n\n  private drawFromTip(relationship: Relationship): void {\n    if (relationship.fromTip !== Tip.NONE) {\n      this.canvas.save();\n      this.canvas.setLineDash([]);\n      this.canvas.translate(relationship.getX1(), relationship.getY1());\n      this.canvas.rotate(relationship.getAngle() + Math.PI);\n      this.drawTip(relationship.fromTip);\n      this.canvas.restore();\n    }\n  }\n\n  private drawToTip(relationship: Relationship): void {\n    if (relationship.toTip !== Tip.NONE) {\n      this.canvas.save();\n      this.canvas.setLineDash([]);\n      this.canvas.translate(relationship.getX2(), relationship.getY2());\n      this.canvas.rotate(relationship.getAngle());\n      this.drawTip(relationship.toTip);\n      this.canvas.restore();\n    }\n  }\n\n  renderText(text: Text) {\n    this.context.push(\"Text\");\n    this.drawText(text.text, \"1.25rem\", \"left\");\n    this.canvas.translate(0, 20);\n    this.context.pop();\n  }\n\n  renderTitle(title: Title): void {\n    this.context.push(\"Title\");\n    this.drawText(title.text, \"1.25rem\", \"center\");\n    this.canvas.translate(0, 20);\n    this.context.pop();\n  }\n\n  renderSeparator(separator: Separator): void {\n    this.canvas.save();\n    this.canvas.beginPath();\n    this.canvas.moveTo(-PADDING, PADDING);\n    this.canvas.lineTo(this.context.getWidth() + PADDING, PADDING);\n    this.canvas.lineWidth = 1.5;\n    this.canvas.strokeStyle = \"#212529\";\n    this.canvas.stroke();\n    this.canvas.restore();\n    this.canvas.translate(0, 2 * PADDING);\n  }\n\n  renderStereotype(stereotype: Stereotype): void {\n    const contextName = this.context.getName();\n    this.context.push(\"Stereotype\");\n    this.drawText(`«${contextName}»`, \"1rem\", \"center\");\n    this.canvas.translate(0, 20);\n    this.context.pop();\n  }\n\n  private drawText(text: string, size: string, align: \"left\" | \"center\") {\n    const properties = this.context.getStyleProperties();\n    const weight = properties.getString(\"font-weight\", \"normal\");\n    const style = properties.getString(\"font-style\", \"normal\");\n\n    this.canvas.save();\n    this.canvas.beginPath();\n    this.canvas.font = `${style} ${weight} ${size} system-ui`;\n    this.canvas.fillStyle = properties.getColor(\"color\", Color.DARK).toHexString();\n    const metrics = this.canvas.measureText(text);\n    const x = align === \"center\" ? (this.context.getWidth() - metrics.width) / 2 : 0;\n    this.canvas.fillText(text, x, metrics.fontBoundingBoxAscent - 3);\n    this.canvas.restore();\n  }\n\n  private drawTip(tip: Tip): void {\n    switch (tip) {\n      case Tip.ARROW:\n        this.drawArrow();\n        break;\n      case Tip.TRIANGLE:\n        this.drawTriangle();\n        break;\n      case Tip.FILLED_TRIANGLE:\n        this.canvas.fillStyle = this.canvas.strokeStyle;\n        this.drawTriangle();\n        break;\n      case Tip.DIAMOND:\n        this.drawDiamond();\n        break;\n      case Tip.FILLED_DIAMOND:\n        this.canvas.fillStyle = this.canvas.strokeStyle;\n        this.drawDiamond();\n        break;\n      case Tip.CIRCLE:\n        this.drawCircle();\n        break;\n      case Tip.FILLED_CIRCLE:\n        this.canvas.fillStyle = this.canvas.strokeStyle;\n        this.drawCircle();\n        break;\n    }\n  }\n\n  private drawArrow() {\n    this.canvas.beginPath();\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(-20, 8);\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(-20, -8);\n    this.canvas.closePath();\n    this.canvas.stroke();\n  }\n\n  private drawTriangle(): void {\n    this.canvas.beginPath();\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(-20, 10);\n    this.canvas.lineTo(-20, -10);\n    this.canvas.closePath();\n    this.canvas.fill();\n    this.canvas.stroke();\n  }\n\n  private drawDiamond(): void {\n    this.canvas.beginPath();\n    this.canvas.moveTo(0, 0);\n    this.canvas.lineTo(-15, 8);\n    this.canvas.lineTo(-30, 0);\n    this.canvas.lineTo(-15, -8);\n    this.canvas.closePath();\n    this.canvas.fill();\n    this.canvas.stroke();\n  }\n\n  private drawCircle(): void {\n    this.canvas.beginPath();\n    this.canvas.ellipse(-10, 0, 10, 10, 0, 0, 2 * Math.PI);\n    this.canvas.closePath();\n    this.canvas.fill();\n    this.canvas.stroke();\n  }\n\n  private renderHandles(diagram: Diagram): void {\n    this.canvas.save();\n    this.canvas.fillStyle = \"white\";\n    this.canvas.strokeStyle = \"black\";\n    this.canvas.lineWidth = 1;\n\n    for (const { x, y } of this.getHandles(diagram)) {\n      this.renderHandleAtPoint(x, y);\n    }\n\n    this.canvas.restore();\n  }\n\n  private *getHandles(diagram: Diagram): Generator<Handle> {\n    for (const child of diagram.getChildren()) {\n      if (child instanceof Classifier && child.isSelected()) {\n        yield* this.getClassifierHandles(child);\n      }\n    }\n  }\n\n  private renderHandleAtPoint(x: number, y: number): void {\n    this.canvas.beginPath();\n    this.canvas.rect(x - HANDLE_RADIUS, y - HANDLE_RADIUS, HANDLE_RADIUS * 2, HANDLE_RADIUS * 2);\n    this.canvas.fill();\n    this.canvas.stroke();\n  }\n\n  findHandleForPoint(diagram: Diagram, x: number, y: number): Handle | undefined {\n    for (const handle of this.getHandles(diagram)) {\n      if (this.isPointInHandle(handle, x, y)) {\n        return handle;\n      }\n    }\n    return undefined;\n  }\n\n  private isPointInHandle(handle: Handle, x: number, y: number): boolean {\n    return Math.abs(x - handle.x) <= HANDLE_RADIUS && Math.abs(y - handle.y) <= HANDLE_RADIUS;\n  }\n\n  private *getClassifierHandles(classifier: Classifier): Generator<Handle> {\n    const x1 = classifier.getLeft();\n    const x2 = classifier.getRight();\n    const y1 = classifier.getTop();\n    const y2 = classifier.getBottom();\n\n    yield new Handle(x1, y1, Anchor.NW);\n    yield new Handle(classifier.getCenterX(), y1, Anchor.N);\n    yield new Handle(x2, y1, Anchor.NE);\n    yield new Handle(x1, classifier.getCenterY(), Anchor.W);\n    yield new Handle(x2, classifier.getCenterY(), Anchor.E);\n    yield new Handle(x1, y2, Anchor.SW);\n    yield new Handle(classifier.getCenterX(), y2, Anchor.S);\n    yield new Handle(x2, y2, Anchor.SE);\n  }\n}\n\nexport default CanvasRenderer;\n","import classNames from \"classnames\";\nimport { MouseEvent, ReactNode } from \"react\";\n\ninterface Props {\n  onClick?: () => void;\n  children?: ReactNode;\n}\n\nfunction DropdownItem({ onClick, children }: Props) {\n  function handleClick(event: MouseEvent) {\n    event.preventDefault();\n    onClick?.();\n  }\n\n  return (\n    <li>\n      <button onClick={handleClick} className={classNames(\"btn\", \"btn-link\", \"dropdown-item\")}>\n        {children}\n      </button>\n    </li>\n  );\n}\n\nexport default DropdownItem;\n","import { Style } from \"../../css\";\nimport { Diagram } from \"../../model\";\nimport { CanvasRenderer } from \"../../renderer\";\nimport DropdownItem from \"../blocks/DropdownItem\";\n\ninterface Props {\n  diagram: Diagram;\n  style: Style;\n}\n\nconst MARGIN = 10;\n\nfunction PNGExport({ diagram, style }: Props) {\n  function handleClick() {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = diagram.getWidth() + 2 * MARGIN;\n    canvas.height = diagram.getHeight() + 2 * MARGIN;\n\n    const renderer = new CanvasRenderer(canvas, style, {\n      translateX: MARGIN - diagram.getLeft(),\n      translateY: MARGIN - diagram.getTop(),\n    });\n    renderer.renderDiagram(diagram);\n\n    const dataURL = canvas.toDataURL(\"image/png\");\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.download = \"uml-diagram.png\";\n    downloadLink.href = dataURL;\n    downloadLink.click();\n  }\n\n  return <DropdownItem onClick={handleClick}>As PNG</DropdownItem>;\n}\n\nexport default PNGExport;\n","import { Style } from \"../../css\";\nimport { Diagram } from \"../../model\";\nimport { MenuBar, Menu } from \"../blocks\";\nimport PNGExport from \"./PNGExport\";\n\ninterface Props {\n  diagram: Diagram;\n  style: Style;\n}\n\nfunction AppMenu({ diagram, style }: Props) {\n  return (\n    <MenuBar>\n      <Menu title=\"Export\">\n        <PNGExport diagram={diagram} style={style} />\n      </Menu>\n    </MenuBar>\n  );\n}\n\nexport default AppMenu;\n","import { MouseEvent } from \"react\";\n\nexport interface Coordinates {\n  readonly x: number;\n  readonly y: number;\n}\n\nexport interface Consumer<T> {\n  (item: T): void;\n}\n\nexport interface Predicate<T> {\n  (item: T): boolean;\n}\n\nexport function getMouseCoordinates(event: MouseEvent<HTMLCanvasElement>): Coordinates {\n  const { clientX, clientY } = event;\n  const boundingClientRect = event.currentTarget.getBoundingClientRect();\n\n  const x = clientX - boundingClientRect.x - boundingClientRect.width / 2;\n  const y = clientY - boundingClientRect.y - boundingClientRect.height / 2;\n\n  return { x, y };\n}\n\nexport function subtractCoords(vec1: Coordinates, vec2: Coordinates): Coordinates {\n  const x = vec1.x - vec2.x;\n  const y = vec1.y - vec2.y;\n  return { x, y };\n}\n\nexport function roundCoordsBy(coord: Coordinates, by: number): Coordinates {\n  return {\n    x: Math.round(coord.x / by) * by,\n    y: Math.round(coord.y / by) * by,\n  };\n}\n","import { MouseEvent, MutableRefObject, useEffect, useRef } from \"react\";\nimport { Style } from \"../../css\";\nimport { Anchor, Classifier, Diagram, Element, Rectangle } from \"../../model\";\nimport { CanvasRenderer, Handle } from \"../../renderer\";\nimport { Coordinates, getMouseCoordinates, roundCoordsBy, subtractCoords } from \"../../utils\";\n\ninterface Props {\n  diagram: Diagram;\n  style: Style;\n  onChange?: (element: Element) => void;\n}\n\nfunction createRenderer(canvas: HTMLCanvasElement, style: Style): CanvasRenderer {\n  return new CanvasRenderer(canvas, style, {\n    translateX: canvas.width / 2,\n    translateY: canvas.height / 2,\n  });\n}\n\nfunction Canvas({ diagram, style, onChange }: Props) {\n  const div = useRef<HTMLDivElement>(null);\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const mouseDownCoords = useRef<Coordinates>(null) as MutableRefObject<Coordinates | null>;\n  const mouseDownRectangle = useRef<Rectangle>(null) as MutableRefObject<Rectangle | null>;\n  const mouseDownObject = useRef<Handle | Element>(null) as MutableRefObject<\n    Handle | Element | null\n  >;\n\n  useEffect(() => {\n    function onResize() {\n      const rect = div.current!.getBoundingClientRect();\n      canvas.current!.width = Math.trunc(rect.width);\n      canvas.current!.height = Math.trunc(rect.height);\n\n      const renderer = createRenderer(canvas.current!, style);\n      renderer.renderDiagram(diagram);\n    }\n\n    window.addEventListener(\"resize\", onResize);\n    onResize();\n    return () => {\n      window.removeEventListener(\"resize\", onResize);\n    };\n  }, [diagram, style]);\n\n  function setCursor(cursor: string): void {\n    canvas.current!.style.cursor = cursor;\n  }\n\n  function handleHandleUpdate(target: Classifier, handle: Handle, deltaX: number, deltaY: number) {\n    if (handle.anchor === Anchor.W || handle.anchor === Anchor.NW || handle.anchor === Anchor.SW) {\n      target.setWidth(mouseDownRectangle.current!.width - deltaX);\n      target.setLeft(mouseDownRectangle.current!.x + deltaX);\n      onChange?.(target);\n    }\n    if (handle.anchor === Anchor.E || handle.anchor === Anchor.NE || handle.anchor === Anchor.SE) {\n      target.setWidth(mouseDownRectangle.current!.width + deltaX);\n      target.setLeft(mouseDownRectangle.current!.x);\n      onChange?.(target);\n    }\n    if (handle.anchor === Anchor.N || handle.anchor === Anchor.NW || handle.anchor === Anchor.NE) {\n      target.setHeight(mouseDownRectangle.current!.height - deltaY);\n      target.setTop(mouseDownRectangle.current!.y + deltaY);\n      onChange?.(target);\n    }\n    if (handle.anchor === Anchor.S || handle.anchor === Anchor.SW || handle.anchor === Anchor.SE) {\n      target.setHeight(mouseDownRectangle.current!.height + deltaY);\n      target.setTop(mouseDownRectangle.current!.y);\n      onChange?.(target);\n    }\n  }\n\n  function handleLeftMouseButtonMove(x: number, y: number) {\n    const target = diagram.find((el) => el.isSelected());\n    if (target instanceof Classifier) {\n      const { x: deltaX, y: deltaY } = roundCoordsBy(\n        subtractCoords({ x, y }, mouseDownCoords.current!),\n        20,\n      );\n      if (mouseDownObject.current === target) {\n        target.setLeft(mouseDownRectangle.current!.x + deltaX);\n        target.setTop(mouseDownRectangle.current!.y + deltaY);\n        onChange?.(target);\n        return;\n      }\n      if (mouseDownObject.current instanceof Handle) {\n        handleHandleUpdate(target, mouseDownObject.current, deltaX, deltaY);\n      }\n    }\n  }\n\n  function handleMouseMove(event: MouseEvent<HTMLCanvasElement>) {\n    const renderer = createRenderer(canvas.current!, style);\n    const { x, y } = getMouseCoordinates(event);\n\n    if (event.buttons & 1) {\n      handleLeftMouseButtonMove(x, y);\n      renderer.renderDiagram(diagram);\n      return;\n    }\n\n    for (const element of diagram) {\n      element.setHovered(false);\n    }\n\n    const handle = renderer.findHandleForPoint(diagram, x, y);\n    if (handle !== undefined) {\n      setCursor(`${Anchor[handle.anchor].toLowerCase()}-resize`);\n    } else {\n      setCursor(\"default\");\n\n      for (const classifier of diagram) {\n        if (classifier instanceof Classifier) {\n          const isInClassifier = renderer.isPointInClassifier(classifier, x, y);\n          if (isInClassifier) {\n            classifier.setHovered(true);\n            break;\n          }\n        }\n      }\n    }\n\n    renderer.renderDiagram(diagram);\n  }\n\n  function renderMouseDown(renderer: CanvasRenderer, x: number, y: number) {\n    const selectedElement = diagram.find((el) => el.isSelected());\n    const handle = renderer.findHandleForPoint(diagram, x, y);\n    if (handle !== undefined && selectedElement instanceof Classifier) {\n      mouseDownRectangle.current = selectedElement.getRectangle();\n      mouseDownCoords.current = { x, y };\n      mouseDownObject.current = handle;\n      return;\n    }\n\n    selectedElement?.setSelected(false);\n    for (const classifier of diagram) {\n      if (classifier instanceof Classifier) {\n        const isInClassifier = renderer.isPointInClassifier(classifier, x, y);\n        if (isInClassifier) {\n          classifier.setSelected(true);\n          mouseDownRectangle.current = classifier.getRectangle();\n          mouseDownCoords.current = { x, y };\n          mouseDownObject.current = classifier;\n          return;\n        }\n      }\n    }\n  }\n\n  function handleMouseDown(event: MouseEvent<HTMLCanvasElement>) {\n    const renderer = createRenderer(canvas.current!, style);\n    const { x, y } = getMouseCoordinates(event);\n\n    renderMouseDown(renderer, x, y);\n    renderer.renderDiagram(diagram);\n  }\n\n  function handleMouseUp() {\n    mouseDownRectangle.current = null;\n    mouseDownCoords.current = null;\n    mouseDownObject.current = null;\n  }\n\n  return (\n    <div\n      ref={div}\n      className=\"Canvas\"\n      style={{\n        backgroundColor: \"hsl(220 9% 92% / 1)\",\n        gridArea: \"canvas\",\n      }}\n    >\n      <canvas\n        ref={canvas}\n        onMouseMove={handleMouseMove}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      />\n    </div>\n  );\n}\n\nexport default Canvas;\n","import CodeMirror from \"codemirror\";\nimport { MutableRefObject, useEffect, useRef } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/hint/xml-hint\";\nimport \"codemirror/addon/comment/comment\";\nimport \"codemirror/addon/edit/matchtags\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/theme/nord.css\";\nimport \"codemirror/addon/hint/show-hint.css\";\nimport \"./Editor.css\";\n\ninterface Props {\n  language: \"css\" | \"xml\";\n  value: string;\n  schema?: any;\n  onChange?: (value: string) => void;\n}\n\nfunction completeAfter(cm: CodeMirror.Editor, pred?: () => boolean) {\n  if (pred?.())\n    setTimeout(() => {\n      if (!cm.state.completionActive) cm.showHint({ completeSingle: false });\n    }, 100);\n  return CodeMirror.Pass;\n}\n\nfunction completeIfAfterLt(cm: CodeMirror.Editor) {\n  return completeAfter(cm, () => {\n    const cur = cm.getCursor();\n    return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) === \"<\";\n  });\n}\n\nfunction completeIfInTag(cm: CodeMirror.Editor) {\n  return completeAfter(cm, () => {\n    const tok = cm.getTokenAt(cm.getCursor());\n    if (\n      tok.type === \"string\" &&\n      (!/['\"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length === 1)\n    )\n      return false;\n    const inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;\n    return inner.tagName;\n  });\n}\n\nfunction Editor({ language, value, schema, onChange }: Props) {\n  const onChangeRef = useRef(onChange);\n  const ref = useRef<HTMLTextAreaElement>(null);\n  const editor = useRef<CodeMirror.Editor>(null) as MutableRefObject<CodeMirror.Editor>;\n\n  useEffect(() => {\n    onChangeRef.current = onChange;\n  }, [onChange]);\n\n  useEffect(() => {\n    const mode = language === \"xml\" ? \"xml\" : \"text/x-scss\";\n    const hintOptions = { schemaInfo: schema } as any;\n    const codeMirror = CodeMirror.fromTextArea(ref.current!, {\n      mode,\n      lineNumbers: true,\n      theme: \"nord\",\n      matchTags: true,\n      autocorrect: true,\n      extraKeys: {\n        \"'<'\": completeAfter,\n        \"'/'\": completeIfAfterLt,\n        \"' '\": completeIfInTag,\n        \"'='\": completeIfInTag,\n        \"Ctrl-Space\": \"autocomplete\",\n        \"Ctrl-/\": \"toggleComment\",\n      },\n      hintOptions,\n    });\n    editor.current = codeMirror;\n\n    return () => {\n      codeMirror.toTextArea();\n    };\n  }, [language, schema]);\n\n  useEffect(() => {\n    editor.current!.setValue(value);\n\n    function handleChange() {\n      const newValue = editor.current!.getValue();\n      if (newValue !== value) {\n        onChangeRef.current?.(newValue);\n      }\n    }\n\n    editor.current!.on(\"change\", handleChange);\n    return () => {\n      editor.current!.off(\"change\", handleChange);\n    };\n  }, [value]);\n\n  return <textarea ref={ref} defaultValue={value} />;\n}\n\nexport default Editor;\n","import Editor from \"../blocks/Editor\";\n\ninterface Props {\n  css: string;\n  onChange?: (css: string) => void;\n}\n\nfunction CSSEditor({ css, onChange }: Props) {\n  return (\n    <div className=\"CSSEditor\" style={{ gridArea: \"css\" }}>\n      <Editor language=\"css\" value={css} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default CSSEditor;\n","import { Anchor, LinePattern, Shape, Tip } from \"../../model\";\n\nconst anchorSchema = Object.keys(Anchor)\n  .filter((it) => it.match(/^\\D+$/))\n  .map((it) => it.toLowerCase());\n\nconst shapeSchema = Object.keys(Shape)\n  .filter((it) => it.match(/^\\D+$/))\n  .map((it) => it.toLowerCase());\n\nconst tipSchema = Object.keys(Tip)\n  .filter((it) => it.match(/^\\D+$/))\n  .map((it) => it.toLowerCase());\n\nconst linePatternSchema = Object.keys(LinePattern)\n  .filter((it) => it.match(/^\\D+$/))\n  .map((it) => it.toLowerCase());\n\nconst classifierSchema = {\n  children: [\"Title\", \"Separator\", \"Method\", \"Stereotype\"],\n  attrs: {\n    x: null,\n    y: null,\n    width: null,\n    height: null,\n    anchor: anchorSchema,\n    shape: shapeSchema,\n  },\n};\n\nconst relationshipSchema = {\n  attrs: {\n    from: null,\n    fromTip: tipSchema,\n    to: null,\n    toTip: tipSchema,\n    linePattern: linePatternSchema,\n  },\n};\n\nconst classifiers = {\n  Class: classifierSchema,\n  Classifier: classifierSchema,\n  Component: classifierSchema,\n  DataType: classifierSchema,\n  Enumeration: classifierSchema,\n  Interface: classifierSchema,\n  Note: classifierSchema,\n  Object: classifierSchema,\n  Package: classifierSchema,\n  Primitive: classifierSchema,\n};\n\nconst relationships = {\n  Aggregation: relationshipSchema,\n  Anchor: relationshipSchema,\n  Association: relationshipSchema,\n  Composition: relationshipSchema,\n  Dependency: relationshipSchema,\n  DirectedAssociation: relationshipSchema,\n  Generalization: relationshipSchema,\n  Implementation: relationshipSchema,\n  Relationship: relationshipSchema,\n};\n\nconst schema = {\n  \"!top\": [\"Diagram\"],\n  \"!attrs\": {\n    id: null,\n    class: null,\n  },\n  Diagram: {\n    children: [...Object.keys(classifiers), ...Object.keys(relationships)],\n  },\n  ...classifiers,\n  ...relationships,\n};\n\nexport default schema;\n","import Editor from \"../blocks/Editor\";\nimport { xmlSchema } from \"../schemas\";\n\ninterface Props {\n  xml: string;\n  onChange: (xml: string) => void;\n}\n\nfunction XMLEditor({ xml, onChange }: Props) {\n  return (\n    <div className=\"XMLEditor\" style={{ gridArea: \"xml\" }}>\n      <Editor language=\"xml\" value={xml} schema={xmlSchema} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default XMLEditor;\n","import { useEffect, useState } from \"react\";\nimport { parser, Style } from \"../css\";\nimport { Diagram, Element } from \"../model\";\nimport { serializer } from \"../serializer\";\nimport \"./App.css\";\nimport { AppMenu, Canvas, CSSEditor, XMLEditor } from \"./widgets\";\n\nfunction App() {\n  const [diagram, setDiagram] = useState(() => new Diagram());\n  const [style, setStyle] = useState(() => new Style());\n  const [xml, setXml] = useState(\"\");\n  const [css, setCss] = useState(\"\");\n\n  function handleXmlChange(xml: string): void {\n    const diagram = serializer.deserialize(xml);\n    setDiagram(diagram);\n  }\n\n  function handleCssChange(css: string): void {\n    const style = parser.parseFromString(css);\n    setStyle(style);\n  }\n\n  function handleCanvasChange(element: Element): void {\n    serializer.updateElement(element);\n    const xml = serializer.serialize(diagram);\n    setXml(xml);\n  }\n\n  useEffect(() => {\n    const initialXml = `\\\n<Diagram>\n  <Interface id=\"i1\" anchor=\"s\" x=\"0\" y=\"-50\">\n    <Stereotype/>\n    <Title>Visitor</Title>\n  </Interface>\n\n  <Class id=\"c1\" anchor=\"n\" x=\"0\" y=\"50\" width=\"400\">\n    <Stereotype/>\n    <Title>Concrete Visitor</Title>\n    <Separator/>\n    <Method>visitSomething(something: Something)</Method>\n  </Class>\n\n  <Implementation from=\"c1\" to=\"i1\" fromAnchor=\"n\" toAnchor=\"s\"/>\n</Diagram>\n`;\n    const initialCss = `\\\nInterface {\n  Title {\n    font-style: italic;\n  }\n}\n\nClass {\n  Title {\n    font-weight: bold;\n  }\n}\n`;\n\n    const diagram = serializer.deserialize(initialXml);\n    const style = parser.parseFromString(initialCss);\n    setDiagram(diagram);\n    setStyle(style);\n    setXml(initialXml);\n    setCss(initialCss);\n  }, []);\n\n  return (\n    <div className=\"App bg-secondary\">\n      <AppMenu diagram={diagram} style={style} />\n      <XMLEditor xml={xml} onChange={handleXmlChange} />\n      <CSSEditor css={css} onChange={handleCssChange} />\n      <Canvas diagram={diagram} style={style} onChange={handleCanvasChange} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}